这样才可以   npm i babel-cli  -g

 babel-node   xx.js


 业务场景 :日志打印 和google 分析 视图 是一个性质的 在不影响 主要的业务逻辑的情况下 进行修饰
 也改变了之前 子类 继承父类的 方法
 A.prototype=new B 这样会讲b私有和共有的属性全部当做共有的继承了
 也可以使用call 不过不能集成私有的

 不使用继承 是最关键的
 装饰者模式（Decorator Pattern），是在不必改变原类文件和使用继承的情况下，动态的扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。
 使用装饰者模式的时候需要注意一下几点内容：
 （1）装饰对象和真实对象有相同的接口。这样客户端对象就可以以和真实对象相同的方式和装饰对象交互。
 （2）装饰对象包含一个真实对象的引用。
 （3）装饰对象接受所有的来自客户端的请求，它把这些请求转发给真实的对象。
 （4）装饰对象可以在转发这些请求以前或以后增加一些附加功能。这样就确保了在运行时，不用修改给定对象的结构就可以在外部增加附加的功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展。然而，装饰者模式，不需要子类可以在应用程序运行时，动态扩展功能，更加方便、灵活。

 适用装饰者模式场合：
 1．当我们需要为某个现有的对象，动态的增加一个新的功能或职责时，可以考虑使用装饰模式。
 2．当某个对象的职责经常发生变化或者经常需要动态的增加职责，避免为了适应这样的变化，而增加继承子类扩展的方式，因为这种方式会造成子类膨胀的速度过快，难以控制。

设计模式的综合:
修饰模式: 我的最爱 angular2 es7中的decorate 可以修饰类，属性 router  angular2都可以修改component
这是不利用继承之外的，非常好的方法，完美
观察者模式: 是javascript里面用的最多的  使用场景: dom2 处理使用兼容性问题 redux vue 都是使用这种模式
享元模式: 使用场景: 为了处理内存过大  场景: 例如有1000台摩托车 之前的场景: 数据库存放了1000个对象
        内存会很大 ，现在根据type 就进行分类 把相同的属性放在type这个类上 大体就这个意思
适配器模式: 类似变压器 220v的电压会经过变压器适配各种电器  js场景 ，例如mysql和mongdb 这个方法要适配这种情况
代理模式: 这个的使用场景太过于复杂，总之为了保护对象不收保护 当让es6中已经可以有这个proxy代理这层了


angular2 通过修饰 @conponent 去写组件  react 通过继承 extends component去写组件 两种不同的思想



