这个问题范围看起来有些大。有限制条件么？
比如应用的特征（CPU密集 or IO ，密集），
团队对不同语言的掌握程度，迭代速度的要求等等。
多数公司加 Node 中间层的目的就是为了把后端的纯服务和流量接入部分分开，
比如想你这样的同学就可以从流量接入层写到页面交互。
这样能减少 1 个 Feature 上线的协作方数量，自然迭代速度能上去。 确实迭代可以上去


在软件工程里面有个架构原则：模块间低耦合高内聚，
早年的 SOA 和近几年的微服务都是这种思想。
流量接入层就是指用户来使用你的服务的入口，
比如乐视网的主站，这里面需要 webserver，web框架，
但是他呈现的数据应该是从多个服务里面取的，
比如用户服务、订单服务、影片服务。

流量接入层一般是负责处理路由、攒数据、渲染页面。
数据服务就是按功能模块去划分。
这种架构下面，服务对外只暴露API，数据库也不会跟别人共享，
所有的状态都有他自己管理，其他模块需要数据都只能从API里面取，这就是高内聚。

数据的话，我们公司的例子，
同样配置的机器，都是提供简单的数据服务（有缓存则读缓存，无则读库然后写缓存），
nodejs 能应付的 qps 是 php-fpm 的 5 倍以上。
nodejs 里面有 event loop，io 全部是异步操作，他的并发处理能力会大很多。

自己本地测的话，可以试用 ab、npm 里面的 loadtest。
如果你们用了阿里云，直接用 pts 服务。

CPU 100%或者内存爆了之后就会出现请求排队，
机器的处理极限就在这个时候，但是容量准备要在这个基础上打点折扣。
比如你压到极限是200QPS，但是你不能按2000去算
因为那个时候会出现请求排对，部分请求的响应时间会很长，服务基本不可用了